{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/Tutorial/","result":{"data":{"site":{"siteMetadata":{"title":"ramonmorcillo.com"}},"allMarkdownRemark":{"totalCount":2,"edges":[{"node":{"excerpt":"Getting started with GraphQL and Node.js The main purpose of this server-client Node.js project is to help other people understand how GraphQL exposes the data from the Server and the Client fetches it. I have tried to make it as simple as possible- if you want to dive into the code of the project you can find it here. Now, straight to the point: GraphQL is a query language for APIs developed and open-sourced by Facebook to speed up the request process. While REST has been a popular way to expose data from a server, instead of having multiple endpoints that return fixed data structures, GraphQL just has a single endpoint and it is the client‚Äôs job to specify what data it needs from it. Table of Contents Getting started Define the Schema Add Resolver function Set up the Server Set up the Client Fetching data from the server Displaying the data Conclusion Useful resources Docs üìö Learn üìù Tools üîß IDEs üíª Extras üçç Getting started The first step is to download and install Node.js in case you haven‚Äôt already. Once you have it installed let‚Äôs begin with the directory structure. The project will be composed of two directories, one for the Client and another for the Server. I have chosen to keep both inside the project root directory but then you can split it into two separate projects or any way you want. Now we will initialize the project in the server directory. Change the location to the server folder in your terminal and run  to fill the project info and generate the package.json file. Or  which tells the generator to use the defaults (instead of asking questions and simply generate an empty npm project without going through an interactive process). The next step will be to install GraphQL.js and Apollo Server to our server. GraphQL.js will provide two important capabilities: Building a type schema, which we will do in the next step. Serving queries against that type schema. To install it just run . I am assuming you are using a version of NPM equal or higher than 5.0.0 so you do not need to add  when installing a dependency to be saved in the package.json Apollo Server, on the other hand, will help us to implement the GraphQL functionalities. It is part of the Apollo Data Graph Platform. Apollo is a platform for building a data graph, a communication layer that seamlessly connects your application clients (such as React and iOS apps) to your back-end services. Is an implementation of GraphQL designed for the needs of product engineering teams building‚Ä¶","fields":{"slug":"/graphql-hello-world-server/"},"frontmatter":{"date":"2020-04-14","title":"Getting started with GraphQL and Node.js"}}},{"node":{"excerpt":"Using GitHub Actions and Renovate App to safely update dependencies automatically In Software Development keeping up to date with technology updates is crucial not only for developers who have to be always learning and renewing their set of skills but also for the projects they work on and have to be maintained. When you start a project from the ground you normally set it up with the libraries‚Äô latest stable versions. Then time goes by, and the size of the project grows, new features are added, new libraries too, and the version of the libraries and packages usually remains the same and almost never gets updated. And yes, why would you update them if the project works perfectly with the current ones?  Here are some reasons why you should keep your dependencies updated: Solving problems from old versions. Adding vulnerability fixes. Increase the overall performance. Add new features from them.  ‚Ä¶  When you keep the dependencies updated you are solving problems from older versions, improving the performance with new optimizations, and you are also able to use new features that other developers added to them. All of these contribute to increasing the maintainability of the code, and the overall project. We all have worked on projects where the dependencies have never (or rarely) been updated.  So how do we do it?  Well, first you can run  to see the latest releases of the packages you are currently using. You can then run  to update them (it will not update them to the major versions) but how do you know which ones will make the project break and which ones won‚Äôt?  Then there is the when, when should you update them? When should you check for updates? every day? every week? ‚Ä¶month? This is why I made this project, to learn about GitHub Actions and use it to have a safe way to automatically update the dependencies without making the project fail. The short explanation of this tutorial is about adding the Renovate app to check for dependencies updates and then submit Pull Requests to update them, this way we will abstract ourselves on checking for updates, so we can focus on more important things.  The point of using GitHub Actions is to set up a workflow and trigger it with every Pull Request to check that the build and tests pass with the updated dependencies before adding them to the project. Table of Contents Getting Started Set up Github Actions Workflow Add Renovate Conclusion Useful Resources Getting Started Although this approach can be applied to any‚Ä¶","fields":{"slug":"/auto-update-dependencies-safely-github-actions/"},"frontmatter":{"date":"2020-07-24","title":"Using GitHub Actions and Renovate to safely update dependencies automatically"}}}]}},"pageContext":{"tag":"Tutorial"}}}