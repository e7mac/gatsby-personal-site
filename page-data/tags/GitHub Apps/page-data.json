{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/GitHub Apps/","result":{"data":{"site":{"siteMetadata":{"title":"ramonmorcillo.com"}},"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"excerpt":"Using GitHub Actions and Renovate App to safely update dependencies automatically In Software Development keeping up to date with technology updates is crucial not only for developers who have to be always learning and renewing their set of skills but also for the projects they work on and have to be maintained. When you start a project from the ground you normally set it up with the libraries’ latest stable versions. Then time goes by, and the size of the project grows, new features are added, new libraries too, and the version of the libraries and packages usually remains the same and almost never gets updated. And yes, why would you update them if the project works perfectly with the current ones?  Here are some reasons why you should keep your dependencies updated: Solving problems from old versions. Adding vulnerability fixes. Increase the overall performance. Add new features from them.  …  When you keep the dependencies updated you are solving problems from older versions, improving the performance with new optimizations, and you are also able to use new features that other developers added to them. All of these contribute to increasing the maintainability of the code, and the overall project. We all have worked on projects where the dependencies have never (or rarely) been updated.  So how do we do it?  Well, first you can run  to see the latest releases of the packages you are currently using. You can then run  to update them (it will not update them to the major versions) but how do you know which ones will make the project break and which ones won’t?  Then there is the when, when should you update them? When should you check for updates? every day? every week? …month? This is why I made this project, to learn about GitHub Actions and use it to have a safe way to automatically update the dependencies without making the project fail. The short explanation of this tutorial is about adding the Renovate app to check for dependencies updates and then submit Pull Requests to update them, this way we will abstract ourselves on checking for updates, so we can focus on more important things.  The point of using GitHub Actions is to set up a workflow and trigger it with every Pull Request to check that the build and tests pass with the updated dependencies before adding them to the project. Table of Contents Getting Started Set up Github Actions Workflow Add Renovate Conclusion Useful Resources Getting Started Although this approach can be applied to any…","fields":{"slug":"/auto-update-dependencies-safely-github-actions/"},"frontmatter":{"date":"2019-05-24","title":"Using GitHub Actions and Renovate to safely update dependencies automatically"}}}]}},"pageContext":{"tag":"GitHub Apps"}}}