{"version":3,"sources":["webpack:///./src/components/Bio.tsx","webpack:///./src/pages/blog.tsx","webpack:///./src/components/Head.tsx"],"names":["Bio","query","render","data","site","siteMetadata","description","social","pageQuery","Blog","siteTitle","title","posts","allMarkdownRemark","edges","Layout","Head","keywords","className","map","node","frontmatter","fields","slug","key","to","date","dangerouslySetInnerHTML","__html","excerpt","image","lang","metaDescription","metaImage","htmlAttributes","titleTemplate","meta","name","content","property","author","googleSiteVerification","concat","length","join"],"mappings":"uNA8CeA,EA9BO,kBACpB,kBAAC,cAAD,CACEC,MAAK,YAaLC,OAAQ,SAACC,GAAqD,MAC9BA,EAAKC,KAAKC,aAAjCC,EADqD,EACrDA,YADqD,EACxCC,OACpB,OACE,6BACE,4BAAKD,GACL,+CAEE,gCArBV,UCqDWE,EAAY,aA2BVC,UAvFmB,SAAC,GAAW,IAAVN,EAAU,EAAVA,KAC5BO,EAAYP,EAAKC,KAAKC,aAAaM,MACnCC,EAAQT,EAAKU,kBAAkBC,MAErC,OACE,kBAACC,EAAA,EAAD,CAAQJ,MAAOD,GACb,kBAACM,EAAA,EAAD,CACEL,MAAM,OACNM,SAAU,CAAC,OAAD,0DASZ,kBAAC,EAAD,MACA,iCACE,yBAAKC,UAAS,gBACXN,EAAMO,KAAI,YAAY,IAAVC,EAAU,EAAVA,KACLT,EAAQS,EAAKC,YAAYV,OAASS,EAAKE,OAAOC,KACpD,OACE,yBAAKC,IAAKJ,EAAKE,OAAOC,MACpB,4BACE,kBAAC,OAAD,CAAME,GAAIL,EAAKE,OAAOC,MAAOZ,IAE/B,+BAAQS,EAAKC,YAAYK,MACzB,uBAAGC,wBAAyB,CAACC,OAAQR,EAAKS,oB,2GCkF3Cb,IA9FmB,SAAC,GAAD,IAChCL,EADgC,EAChCA,MACAL,EAFgC,EAEhCA,YACAwB,EAHgC,EAGhCA,MACAC,EAJgC,EAIhCA,KACAd,EALgC,EAKhCA,SALgC,OAOhC,kBAAC,cAAD,CACEhB,MAAK,aAeLC,OAAQ,SAACC,GACP,IAAM6B,EAAkB1B,GAAeH,EAAKC,KAAKC,aAAaC,YACxD2B,EAAYH,GAAS3B,EAAKC,KAAKC,aAAayB,MAGlD,OAFAC,EAAOA,GAAQ,KACfd,EAAWA,GAAY,GAErB,kBAAC,IAAD,CACEiB,eAAgB,CACdH,QAEFpB,MAAOA,EACPwB,cAAa,QAAUhC,EAAKC,KAAKC,aAAaM,MAC9CyB,KAAM,CACJ,CACEC,KAAM,cACNC,QAASN,GAEX,CACEO,SAAU,WACVD,QAAS3B,GAEX,CACE4B,SAAU,iBACVD,QAASN,GAEX,CACEO,SAAU,WACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASnC,EAAKC,KAAKC,aAAamC,OAAOH,MAEzC,CACEA,KAAM,gBACNC,QAAS3B,GAEX,CACE0B,KAAM,sBACNC,QAASN,GAEX,CACEK,KAAM,gBACNC,QAASL,GAEX,CACEI,KAAM,2BACNC,QAASnC,EAAKC,KAAKC,aAAaoC,yBAElCC,OACAzB,EAAS0B,OAAS,EACd,CACEN,KAAM,WACNC,QAASrB,EAAS2B,KAAT,OAEX,OA/Ed,W","file":"component---src-pages-blog-tsx-3d6740378b377824f506.js","sourcesContent":["import React from 'react';\nimport {StaticQuery, graphql} from 'gatsby';\nimport {string} from 'prop-types';\n\ntype StaticQueryData = {\n  site: {\n    siteMetadata: {\n      description: string;\n      social: {\n        name: string;\n        socialUrl: string;\n      };\n    };\n  };\n};\n\nconst Bio: React.FC = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            description\n            social {\n              name\n              socialUrl\n            }\n          }\n        }\n      }\n    `}\n    render={(data: StaticQueryData): React.ReactElement | null => {\n      const {description, social} = data.site.siteMetadata;\n      return (\n        <div>\n          <h1>{description}</h1>\n          <p>\n            By Ram√≥n Morcillo\n            <br />\n          </p>\n        </div>\n      );\n    }}\n  />\n);\n\nexport default Bio;\n","import React from 'react';\nimport {Link, graphql} from 'gatsby';\nimport Head from '../components/Head';\nimport Layout from '../components/Layout';\nimport Bio from '../components/Bio';\n\ninterface BlogProps {\n  readonly data: PageQueryData;\n}\n\nconst Blog: React.FC<BlogProps> = ({data}) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout title={siteTitle}>\n      <Head\n        title=\"Blog\"\n        keywords={[\n          `blog`,\n          `gatsby`,\n          `typescript`,\n          `javascript`,\n          `portfolio`,\n          `react`\n        ]}\n      />\n      <Bio />\n      <article>\n        <div className={`page-content`}>\n          {posts.map(({node}) => {\n            const title = node.frontmatter.title || node.fields.slug;\n            return (\n              <div key={node.fields.slug}>\n                <h3>\n                  <Link to={node.fields.slug}>{title}</Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n                <p dangerouslySetInnerHTML={{__html: node.excerpt}} />\n              </div>\n            );\n          })}\n        </div>\n      </article>\n    </Layout>\n  );\n};\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string;\n    };\n  };\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string;\n        fields: {\n          slug: string;\n        };\n        frontmatter: {\n          date: string;\n          title: string;\n        };\n      };\n    }[];\n  };\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: {frontmatter: {published: {ne: false}}}\n      sort: {fields: [frontmatter___date], order: DESC}\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Blog;\n","import React from 'react';\nimport {Helmet} from 'react-helmet';\nimport {StaticQuery, graphql} from 'gatsby';\n\ntype StaticQueryData = {\n  site: {\n    siteMetadata: {\n      title: string;\n      description: string;\n      image: string;\n      googleSiteVerification: string;\n      author: {\n        name: string;\n      };\n    };\n  };\n};\n\ninterface HeadProps {\n  readonly title: string;\n  readonly description?: string;\n  readonly image?: string;\n  readonly lang?: string;\n  readonly keywords?: string[];\n}\n\nconst Head: React.FC<HeadProps> = ({\n  title,\n  description,\n  image,\n  lang,\n  keywords\n}) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            image\n            googleSiteVerification\n            author {\n              name\n            }\n          }\n        }\n      }\n    `}\n    render={(data: StaticQueryData): React.ReactElement | null => {\n      const metaDescription = description || data.site.siteMetadata.description;\n      const metaImage = image || data.site.siteMetadata.image;\n      lang = lang || 'en';\n      keywords = keywords || [];\n      return (\n        <Helmet\n          htmlAttributes={{\n            lang\n          }}\n          title={title}\n          titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n          meta={[\n            {\n              name: `description`,\n              content: metaDescription\n            },\n            {\n              property: `og:title`,\n              content: title\n            },\n            {\n              property: `og:description`,\n              content: metaDescription\n            },\n            {\n              property: `og:image`,\n              content: metaImage\n            },\n            {\n              property: `og:type`,\n              content: `website`\n            },\n            {\n              name: `twitter:card`,\n              content: `summary`\n            },\n            {\n              name: `twitter:creator`,\n              content: data.site.siteMetadata.author.name\n            },\n            {\n              name: `twitter:title`,\n              content: title\n            },\n            {\n              name: `twitter:description`,\n              content: metaDescription\n            },\n            {\n              name: `twitter:image`,\n              content: metaImage\n            },\n            {\n              name: `google-site-verification`,\n              content: data.site.siteMetadata.googleSiteVerification\n            }\n          ].concat(\n            keywords.length > 0\n              ? {\n                  name: `keywords`,\n                  content: keywords.join(`, `)\n                }\n              : []\n          )}\n        />\n      );\n    }}\n  />\n);\n\nexport default Head;\n"],"sourceRoot":""}