{"version":3,"sources":["webpack:///./src/templates/post.tsx","webpack:///./src/components/head.tsx"],"names":["StyledUl","styled","pageQuery","PostTemplate","data","pageContext","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","frontmatter","description","excerpt","date","className","dangerouslySetInnerHTML","__html","html","to","fields","slug","rel","Head","image","lang","keywords","query","render","metaDescription","metaImage","htmlAttributes","titleTemplate","meta","name","content","property","author","googleSiteVerification","concat","length","join"],"mappings":"6FAAA,0HAiBMA,EAAWC,YAAO,MAAV,qEAAGA,CAAH,wFA+DDC,EAAY,aAmBVC,UAzEuB,SAAC,GAAwB,IAAvBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,YACtCC,EAAOF,EAAKG,eACZC,EAAYJ,EAAKK,KAAKC,aAAaC,MAClCC,EAAkBP,EAAlBO,SAAUC,EAAQR,EAARQ,KAEjB,OACE,kBAAC,IAAD,CAAQF,MAAOH,GACb,kBAAC,IAAD,CAAMG,MAAOL,EAAKQ,YAAYH,MAAOI,YAAaT,EAAKU,UACvD,iCACE,gCACE,4BAAKV,EAAKQ,YAAYH,OACtB,2BAAIL,EAAKQ,YAAYG,OAEvB,yBAAKC,UAAS,gBACZ,yBAAKC,wBAAyB,CAACC,OAAQd,EAAKe,QAC5C,kBAACrB,EAAD,KACGY,GACC,4BACE,kBAAC,OAAD,CAAMU,GAAIV,EAASW,OAAOC,KAAMC,IAAI,QAApC,KACKb,EAASE,YAAYH,QAI7BE,GACC,4BACE,kBAAC,OAAD,CAAMS,GAAIT,EAAKU,OAAOC,KAAMC,IAAI,QAC7BZ,EAAKC,YAAYH,MADpB,a,yGCqEDe,IA9FmB,SAAC,GAAD,IAChCf,EADgC,EAChCA,MACAI,EAFgC,EAEhCA,YACAY,EAHgC,EAGhCA,MACAC,EAJgC,EAIhCA,KACAC,EALgC,EAKhCA,SALgC,OAOhC,kBAAC,cAAD,CACEC,MAAK,aAeLC,OAAQ,SAAC3B,GACP,IAAM4B,EAAkBjB,GAAeX,EAAKK,KAAKC,aAAaK,YACxDkB,EAAYN,GAASvB,EAAKK,KAAKC,aAAaiB,MAGlD,OAFAC,EAAOA,GAAQ,KACfC,EAAWA,GAAY,GAErB,kBAAC,IAAD,CACEK,eAAgB,CACdN,QAEFjB,MAAOA,EACPwB,cAAa,QAAU/B,EAAKK,KAAKC,aAAaC,MAC9CyB,KAAM,CACJ,CACEC,KAAM,cACNC,QAASN,GAEX,CACEO,SAAU,WACVD,QAAS3B,GAEX,CACE4B,SAAU,iBACVD,QAASN,GAEX,CACEO,SAAU,WACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASlC,EAAKK,KAAKC,aAAa8B,OAAOH,MAEzC,CACEA,KAAM,gBACNC,QAAS3B,GAEX,CACE0B,KAAM,sBACNC,QAASN,GAEX,CACEK,KAAM,gBACNC,QAASL,GAEX,CACEI,KAAM,2BACNC,QAASlC,EAAKK,KAAKC,aAAa+B,yBAElCC,OACAb,EAASc,OAAS,EACd,CACEN,KAAM,WACNC,QAAST,EAASe,KAAT,OAEX,OA/Ed","file":"component---src-templates-post-tsx-7a322f8b3bff8c7c9b00.js","sourcesContent":["import React from 'react';\nimport {Link, graphql} from 'gatsby';\nimport styled from 'styled-components';\n\nimport Layout from '../components/Layout';\nimport Head from '../components/head';\n\ninterface Props {\n  readonly data: PageQueryData;\n  readonly pageContext: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    previous?: any;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    next?: any;\n  };\n}\n\nconst StyledUl = styled('ul')`\n  list-style-type: none;\n\n  li::before {\n    content: '' !important;\n    padding-right: 0 !important;\n  }\n`;\n\nconst PostTemplate: React.FC<Props> = ({data, pageContext}) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata.title;\n  const {previous, next} = pageContext;\n\n  return (\n    <Layout title={siteTitle}>\n      <Head title={post.frontmatter.title} description={post.excerpt} />\n      <article>\n        <header>\n          <h1>{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <div className={`page-content`}>\n          <div dangerouslySetInnerHTML={{__html: post.html}} />\n          <StyledUl>\n            {previous && (\n              <li>\n                <Link to={previous.fields.slug} rel=\"prev\">\n                  ← {previous.frontmatter.title}\n                </Link>\n              </li>\n            )}\n            {next && (\n              <li>\n                <Link to={next.fields.slug} rel=\"next\">\n                  {next.frontmatter.title} →\n                </Link>\n              </li>\n            )}\n          </StyledUl>\n        </div>\n      </article>\n    </Layout>\n  );\n};\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string;\n    };\n  };\n  markdownRemark: {\n    id?: string;\n    excerpt?: string;\n    html: string;\n    frontmatter: {\n      title: string;\n      date: string;\n    };\n  };\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: {slug: {eq: $slug}}) {\n      id\n      excerpt(pruneLength: 2500)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`;\n\nexport default PostTemplate;\n","import React from 'react';\nimport {Helmet} from 'react-helmet';\nimport {StaticQuery, graphql} from 'gatsby';\n\ntype StaticQueryData = {\n  site: {\n    siteMetadata: {\n      title: string;\n      description: string;\n      image: string;\n      googleSiteVerification: string;\n      author: {\n        name: string;\n      };\n    };\n  };\n};\n\ninterface HeadProps {\n  readonly title: string;\n  readonly description?: string;\n  readonly image?: string;\n  readonly lang?: string;\n  readonly keywords?: string[];\n}\n\nconst Head: React.FC<HeadProps> = ({\n  title,\n  description,\n  image,\n  lang,\n  keywords\n}) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            image\n            googleSiteVerification\n            author {\n              name\n            }\n          }\n        }\n      }\n    `}\n    render={(data: StaticQueryData): React.ReactElement | null => {\n      const metaDescription = description || data.site.siteMetadata.description;\n      const metaImage = image || data.site.siteMetadata.image;\n      lang = lang || 'en';\n      keywords = keywords || [];\n      return (\n        <Helmet\n          htmlAttributes={{\n            lang\n          }}\n          title={title}\n          titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n          meta={[\n            {\n              name: `description`,\n              content: metaDescription\n            },\n            {\n              property: `og:title`,\n              content: title\n            },\n            {\n              property: `og:description`,\n              content: metaDescription\n            },\n            {\n              property: `og:image`,\n              content: metaImage\n            },\n            {\n              property: `og:type`,\n              content: `website`\n            },\n            {\n              name: `twitter:card`,\n              content: `summary`\n            },\n            {\n              name: `twitter:creator`,\n              content: data.site.siteMetadata.author.name\n            },\n            {\n              name: `twitter:title`,\n              content: title\n            },\n            {\n              name: `twitter:description`,\n              content: metaDescription\n            },\n            {\n              name: `twitter:image`,\n              content: metaImage\n            },\n            {\n              name: `google-site-verification`,\n              content: data.site.siteMetadata.googleSiteVerification\n            }\n          ].concat(\n            keywords.length > 0\n              ? {\n                  name: `keywords`,\n                  content: keywords.join(`, `)\n                }\n              : []\n          )}\n        />\n      );\n    }}\n  />\n);\n\nexport default Head;\n"],"sourceRoot":""}