{"version":3,"sources":["webpack:///./src/components/head.tsx","webpack:///./src/pages/tags.tsx"],"names":["Head","title","description","image","lang","keywords","query","render","data","metaDescription","site","siteMetadata","metaImage","htmlAttributes","titleTemplate","meta","name","content","property","author","googleSiteVerification","concat","length","join","pageQuery","Tags","siteTitle","group","allMarkdownRemark","className","map","tag","key","fieldValue","to","totalCount"],"mappings":"kKAwHeA,IA9FmB,SAAC,GAAD,IAChCC,EADgC,EAChCA,MACAC,EAFgC,EAEhCA,YACAC,EAHgC,EAGhCA,MACAC,EAJgC,EAIhCA,KACAC,EALgC,EAKhCA,SALgC,OAOhC,kBAAC,cAAD,CACEC,MAAK,aAeLC,OAAQ,SAACC,GACP,IAAMC,EAAkBP,GAAeM,EAAKE,KAAKC,aAAaT,YACxDU,EAAYT,GAASK,EAAKE,KAAKC,aAAaR,MAGlD,OAFAC,EAAOA,GAAQ,KACfC,EAAWA,GAAY,GAErB,kBAAC,IAAD,CACEQ,eAAgB,CACdT,QAEFH,MAAOA,EACPa,cAAa,QAAUN,EAAKE,KAAKC,aAAaV,MAC9Cc,KAAM,CACJ,CACEC,KAAM,cACNC,QAASR,GAEX,CACES,SAAU,WACVD,QAAShB,GAEX,CACEiB,SAAU,iBACVD,QAASR,GAEX,CACES,SAAU,WACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAAST,EAAKE,KAAKC,aAAaQ,OAAOH,MAEzC,CACEA,KAAM,gBACNC,QAAShB,GAEX,CACEe,KAAM,sBACNC,QAASR,GAEX,CACEO,KAAM,gBACNC,QAASL,GAEX,CACEI,KAAM,2BACNC,QAAST,EAAKE,KAAKC,aAAaS,yBAElCC,OACAhB,EAASiB,OAAS,EACd,CACEN,KAAM,WACNC,QAASZ,EAASkB,KAAT,OAEX,OA/Ed,W,kCCjCF,8GA4DaC,EAAY,aAgBVC,UAlEe,SAAC,GAAW,IAAVjB,EAAU,EAAVA,KACxBkB,EAAYlB,EAAKE,KAAKC,aAAaV,MACnC0B,EAAQnB,EAAKoB,mBAAqBpB,EAAKoB,kBAAkBD,MAE/D,OACE,kBAAC,IAAD,CAAQ1B,MAAOyB,GACb,kBAAC,IAAD,CACEzB,MAAM,WACNI,SAAU,CAAC,OAAD,iCAEZ,iCACE,wCACA,yBAAKwB,UAAS,gBACXF,GACCA,EAAMG,KACJ,SAAAC,GAAG,OACDA,GACE,yBAAKC,IAAKD,EAAIE,YACZ,4BACE,kBAAC,OAAD,CAAMC,GAAE,SAAWH,EAAIE,WAAf,KACLF,EAAIE,aAGT,+BACGF,EAAII,WADP,QAEsB,IAAnBJ,EAAII,WAAmB,GAAK","file":"component---src-pages-tags-tsx-19af3cba46856a8ddb25.js","sourcesContent":["import React from 'react';\nimport {Helmet} from 'react-helmet';\nimport {StaticQuery, graphql} from 'gatsby';\n\ntype StaticQueryData = {\n  site: {\n    siteMetadata: {\n      title: string;\n      description: string;\n      image: string;\n      googleSiteVerification: string;\n      author: {\n        name: string;\n      };\n    };\n  };\n};\n\ninterface HeadProps {\n  readonly title: string;\n  readonly description?: string;\n  readonly image?: string;\n  readonly lang?: string;\n  readonly keywords?: string[];\n}\n\nconst Head: React.FC<HeadProps> = ({\n  title,\n  description,\n  image,\n  lang,\n  keywords\n}) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            image\n            googleSiteVerification\n            author {\n              name\n            }\n          }\n        }\n      }\n    `}\n    render={(data: StaticQueryData): React.ReactElement | null => {\n      const metaDescription = description || data.site.siteMetadata.description;\n      const metaImage = image || data.site.siteMetadata.image;\n      lang = lang || 'en';\n      keywords = keywords || [];\n      return (\n        <Helmet\n          htmlAttributes={{\n            lang\n          }}\n          title={title}\n          titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n          meta={[\n            {\n              name: `description`,\n              content: metaDescription\n            },\n            {\n              property: `og:title`,\n              content: title\n            },\n            {\n              property: `og:description`,\n              content: metaDescription\n            },\n            {\n              property: `og:image`,\n              content: metaImage\n            },\n            {\n              property: `og:type`,\n              content: `website`\n            },\n            {\n              name: `twitter:card`,\n              content: `summary`\n            },\n            {\n              name: `twitter:creator`,\n              content: data.site.siteMetadata.author.name\n            },\n            {\n              name: `twitter:title`,\n              content: title\n            },\n            {\n              name: `twitter:description`,\n              content: metaDescription\n            },\n            {\n              name: `twitter:image`,\n              content: metaImage\n            },\n            {\n              name: `google-site-verification`,\n              content: data.site.siteMetadata.googleSiteVerification\n            }\n          ].concat(\n            keywords.length > 0\n              ? {\n                  name: `keywords`,\n                  content: keywords.join(`, `)\n                }\n              : []\n          )}\n        />\n      );\n    }}\n  />\n);\n\nexport default Head;\n","import React from 'react';\nimport {Link, graphql} from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport Head from '../components/head';\n\ninterface Props {\n  readonly data: PageQueryData;\n}\n\nconst Tags: React.FC<Props> = ({data}) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const group = data.allMarkdownRemark && data.allMarkdownRemark.group;\n\n  return (\n    <Layout title={siteTitle}>\n      <Head\n        title=\"All tags\"\n        keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n      />\n      <article>\n        <h1>All tags</h1>\n        <div className={`page-content`}>\n          {group &&\n            group.map(\n              tag =>\n                tag && (\n                  <div key={tag.fieldValue}>\n                    <h3>\n                      <Link to={`/tags/${tag.fieldValue}/`}>\n                        {tag.fieldValue}\n                      </Link>\n                    </h3>\n                    <small>\n                      {tag.totalCount} post\n                      {tag.totalCount === 1 ? '' : 's'}\n                    </small>\n                  </div>\n                )\n            )}\n        </div>\n      </article>\n    </Layout>\n  );\n};\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string;\n    };\n  };\n  allMarkdownRemark: {\n    group: {\n      fieldValue: string;\n      totalCount: number;\n    }[];\n  };\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(filter: {frontmatter: {published: {ne: false}}}) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}