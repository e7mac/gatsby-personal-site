{"version":3,"sources":["webpack:///./src/templates/tag.tsx","webpack:///./src/components/head.tsx"],"names":["pageQuery","TagTemplate","data","tag","pageContext","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","keywords","className","map","node","frontmatter","fields","slug","key","to","date","dangerouslySetInnerHTML","__html","excerpt","Head","description","image","lang","query","render","metaDescription","metaImage","htmlAttributes","titleTemplate","meta","name","content","property","author","googleSiteVerification","concat","length","join"],"mappings":"2FAAA,8GAsEaA,EAAY,aA4BVC,UArFsB,SAAC,GAAwB,IAAvBC,EAAuB,EAAvBA,KAC9BC,EADqD,EAAjBC,YACpCD,IACDE,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQH,MAAOH,GACb,kBAAC,IAAD,CACEG,MAAK,iBAAmBL,EAAnB,IACLS,SAAU,CAAC,OAAD,8BAA0CT,KAEtD,iCACE,gCACE,4CAAkBA,IAEpB,yBAAKU,UAAS,gBACXJ,EAAMK,KAAI,YAAY,IAAVC,EAAU,EAAVA,KACLP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KACpD,OACE,yBAAKC,IAAKJ,EAAKE,OAAOC,MACpB,4BACE,kBAAC,OAAD,CAAME,GAAIL,EAAKE,OAAOC,MAAOV,IAE/B,+BAAQO,EAAKC,YAAYK,MACzB,uBAAGC,wBAAyB,CAACC,OAAQR,EAAKS,oB,yGCmF3CC,IA9FmB,SAAC,GAAD,IAChCjB,EADgC,EAChCA,MACAkB,EAFgC,EAEhCA,YACAC,EAHgC,EAGhCA,MACAC,EAJgC,EAIhCA,KACAhB,EALgC,EAKhCA,SALgC,OAOhC,kBAAC,cAAD,CACEiB,MAAK,aAeLC,OAAQ,SAAC5B,GACP,IAAM6B,EAAkBL,GAAexB,EAAKI,KAAKC,aAAamB,YACxDM,EAAYL,GAASzB,EAAKI,KAAKC,aAAaoB,MAGlD,OAFAC,EAAOA,GAAQ,KACfhB,EAAWA,GAAY,GAErB,kBAAC,IAAD,CACEqB,eAAgB,CACdL,QAEFpB,MAAOA,EACP0B,cAAa,QAAUhC,EAAKI,KAAKC,aAAaC,MAC9C2B,KAAM,CACJ,CACEC,KAAM,cACNC,QAASN,GAEX,CACEO,SAAU,WACVD,QAAS7B,GAEX,CACE8B,SAAU,iBACVD,QAASN,GAEX,CACEO,SAAU,WACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASnC,EAAKI,KAAKC,aAAagC,OAAOH,MAEzC,CACEA,KAAM,gBACNC,QAAS7B,GAEX,CACE4B,KAAM,sBACNC,QAASN,GAEX,CACEK,KAAM,gBACNC,QAASL,GAEX,CACEI,KAAM,2BACNC,QAASnC,EAAKI,KAAKC,aAAaiC,yBAElCC,OACA7B,EAAS8B,OAAS,EACd,CACEN,KAAM,WACNC,QAASzB,EAAS+B,KAAT,OAEX,OA/Ed","file":"component---src-templates-tag-tsx-33e3f7e91c7635f605fb.js","sourcesContent":["import React from 'react';\nimport {Link, graphql} from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport Head from '../components/head';\n\ninterface Props {\n  readonly data: PageQueryData;\n  readonly pageContext: {\n    tag: string;\n  };\n}\n\nconst TagTemplate: React.FC<Props> = ({data, pageContext}) => {\n  const {tag} = pageContext;\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout title={siteTitle}>\n      <Head\n        title={`Posts tagged \"${tag}\"`}\n        keywords={[`blog`, `gatsby`, `javascript`, `react`, tag]}\n      />\n      <article>\n        <header>\n          <h1>Posts tagged {tag}</h1>\n        </header>\n        <div className={`page-content`}>\n          {posts.map(({node}) => {\n            const title = node.frontmatter.title || node.fields.slug;\n            return (\n              <div key={node.fields.slug}>\n                <h3>\n                  <Link to={node.fields.slug}>{title}</Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n                <p dangerouslySetInnerHTML={{__html: node.excerpt}} />\n              </div>\n            );\n          })}\n        </div>\n      </article>\n    </Layout>\n  );\n};\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string;\n    };\n  };\n  allMarkdownRemark: {\n    totalCount: number;\n    edges: {\n      node: {\n        excerpt: string;\n        fields: {\n          slug: string;\n        };\n        frontmatter: {\n          date: string;\n          title: string;\n        };\n      };\n    }[];\n  };\n}\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      filter: {frontmatter: {tags: {in: [$tag]}}}\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 2500)\n          fields {\n            slug\n          }\n          frontmatter {\n            date\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagTemplate;\n","import React from 'react';\nimport {Helmet} from 'react-helmet';\nimport {StaticQuery, graphql} from 'gatsby';\n\ntype StaticQueryData = {\n  site: {\n    siteMetadata: {\n      title: string;\n      description: string;\n      image: string;\n      googleSiteVerification: string;\n      author: {\n        name: string;\n      };\n    };\n  };\n};\n\ninterface HeadProps {\n  readonly title: string;\n  readonly description?: string;\n  readonly image?: string;\n  readonly lang?: string;\n  readonly keywords?: string[];\n}\n\nconst Head: React.FC<HeadProps> = ({\n  title,\n  description,\n  image,\n  lang,\n  keywords\n}) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            image\n            googleSiteVerification\n            author {\n              name\n            }\n          }\n        }\n      }\n    `}\n    render={(data: StaticQueryData): React.ReactElement | null => {\n      const metaDescription = description || data.site.siteMetadata.description;\n      const metaImage = image || data.site.siteMetadata.image;\n      lang = lang || 'en';\n      keywords = keywords || [];\n      return (\n        <Helmet\n          htmlAttributes={{\n            lang\n          }}\n          title={title}\n          titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n          meta={[\n            {\n              name: `description`,\n              content: metaDescription\n            },\n            {\n              property: `og:title`,\n              content: title\n            },\n            {\n              property: `og:description`,\n              content: metaDescription\n            },\n            {\n              property: `og:image`,\n              content: metaImage\n            },\n            {\n              property: `og:type`,\n              content: `website`\n            },\n            {\n              name: `twitter:card`,\n              content: `summary`\n            },\n            {\n              name: `twitter:creator`,\n              content: data.site.siteMetadata.author.name\n            },\n            {\n              name: `twitter:title`,\n              content: title\n            },\n            {\n              name: `twitter:description`,\n              content: metaDescription\n            },\n            {\n              name: `twitter:image`,\n              content: metaImage\n            },\n            {\n              name: `google-site-verification`,\n              content: data.site.siteMetadata.googleSiteVerification\n            }\n          ].concat(\n            keywords.length > 0\n              ? {\n                  name: `keywords`,\n                  content: keywords.join(`, `)\n                }\n              : []\n          )}\n        />\n      );\n    }}\n  />\n);\n\nexport default Head;\n"],"sourceRoot":""}